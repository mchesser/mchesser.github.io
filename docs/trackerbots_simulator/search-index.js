var searchIndex = {};
searchIndex["simulation"] = {"doc":"This crate provides functionality for configuring and running a simulation of a range-based\ntracking system.","items":[[3,"Measurement","simulation","A measurement taken by a UAV at a particular point in time",null,null],[12,"uav_state","","The state of the UAV when the measurement was taken",0,null],[12,"rssi","","The measurement obtained",0,null],[3,"SimulationRunner","","A structure for running a configured simulation",null,null],[12,"uavs","","",1,null],[3,"SimulationFrame","","A snapshot of the simulation at a particular point in time",null,null],[12,"uavs","","The state of each UAV in the simulation",2,null],[12,"targets","","A list of all targets (with particle filter information) in the simulation",2,null],[3,"FilterFrame","","A frame representing a single target (i.e. animal) at a particular point in time",null,null],[12,"animal_state","","The animal&#39;s true state",3,null],[12,"particles","","The current list of particles from the particle filter",3,null],[12,"particles_mean","","An estimate of the animal&#39;s true state based on the mean value of all the particles",3,null],[3,"SimulationConfig","","Configuration options for a simulation",null,null],[12,"uavs","","The list of UAVs to simulate",4,null],[12,"animals","","The list of animals to simulate",4,null],[12,"map_size","","The initial size of the map",4,null],[12,"num_particles","","The number of particles to use in the particle filter",4,null],[12,"particle_noise","","The amount of noise to use in the particle filter",4,null],[11,"clone","","",0,null],[11,"new","","Create a new simulation runner using the provided config and list of animals",1,{"inputs":[{"name":"simulationconfig"}],"output":{"name":"simulationrunner"}}],[11,"snapshot","","Get a snapshot of the current simulation frame",1,null],[11,"config_compatible","","Checks if the new config is compatible with the old config.",1,null],[11,"step","","Performs a single step in the simulation",1,null],[11,"update_config","","Updates the config of all subcomponents (if compabible)",1,null],[0,"animal","","",null,null],[3,"AnimalState","simulation::animal","The state of an animal at a particular point in time",null,null],[12,"position","","The current position of the animal",5,null],[12,"velocity","","The current velocity of the animal (meters/second)",5,null],[3,"AnimalConfig","","Configuration options for an animal in a simulation",null,null],[12,"position","","The starting position of the animal",6,null],[12,"speed","","The speed of the animal",6,null],[12,"walk_variance","","The average rate at which the animal changes (radians / second)",6,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"new","","Create a new animal config with using the provided parameters",6,null],[0,"signal","simulation","",null,null],[3,"SignalConfig","simulation::signal","Configuration options for a signal model",null,null],[12,"signal_noise","","The amount of noise to add when generating new measurements with this model",7,null],[12,"gain_pattern","","The pattern used for adjusting the signal gain",7,null],[12,"propagation_model","","The model used for calculating the base signal strength from distance",7,null],[3,"RssiModel","","A model for computing the expected RSSI value based on the state of the UAV and the position of\nthe beacon.",null,null],[4,"GainPattern","","A pattern used for adjusting the signal gain",null,null],[13,"Uniform","","A simple model where every direction has equal gain",8,null],[13,"Figure8","","A model where the gain is strongest at the front and back, and weakest at the sides",8,null],[4,"PropagationModel","","The model used for calculating the base signal strength from distance",null,null],[13,"FreeSpace","","A simple free space model",9,null],[13,"TwoWave","","A propagation model that considers the direct wave and a ground reflection",9,null],[5,"path_loss_model","","A simple direct wave path loss model",null,null],[5,"two_wave_model","","A model based on a direct wave and a single ground reflection",null,null],[5,"omni_directional_model","","Generates a radiation model where every direction returns the same gain.",null,{"inputs":[],"output":{"name":"genericradiationpattern"}}],[5,"basic_radiation_model","","Generates a basic radiation model",null,{"inputs":[],"output":{"name":"genericradiationpattern"}}],[11,"clone","","",8,null],[11,"try_from","","",8,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"clone","","",9,null],[11,"try_from","","",9,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"clone","","",7,null],[11,"new","","Create a new signal model using the specified parameters",7,{"inputs":[{"name":"f32"},{"name":"gainpattern"},{"name":"propagationmodel"}],"output":{"name":"signalconfig"}}],[11,"new","","Create a new RSSI mode given a radiation pattern and a propagation model.",10,{"inputs":[{"name":"genericradiationpattern"},{"name":"t"}],"output":{"name":"rssimodel"}}],[11,"rssi","","Compute the expected RSSI value for a signal source at a set position",10,null],[0,"uav","simulation","",null,null],[3,"UavState","simulation::uav","The state of the uav at a particular point in time",null,null],[12,"position","","The position of the UAV (in meters)",11,null],[12,"velocity","","The velocity of the UAV (in meters/second)",11,null],[12,"orientation","","The orientation of the UAV",11,null],[3,"UavConfig","","Configuration options for a UAV in the simulation",null,null],[12,"capture_rate","","The rate at which new measurements are obtained (not currently used)",12,null],[12,"speed","","The speed of the uav (in meters/second)",12,null],[12,"controller","","Configuration options for how the UAV is controlled",12,null],[12,"receiver","","Configuration options for how the UAV receives the signal",12,null],[3,"UavController","","Configuration options for how the UAV is controlled",null,null],[12,"pattern_size","","The size of the bounding rectangle that contains the flight pattern",13,null],[12,"pattern_center","","The center (or offset) of the flight pattern",13,null],[12,"pattern_type","","The type of patten to use",13,null],[4,"PatternType","","",null,null],[13,"Elliptical","","",14,null],[13,"Rectangular","","",14,null],[13,"Direct","","",14,null],[11,"clone","","",14,null],[11,"try_from","","",14,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"new","","Create a new UAV state object with a specified position, velocity and orientation",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[11,"new","","Create a new UAV controller using the specified parameters",13,null],[11,"clone","simulation","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"simulationconfig"}}]],"paths":[[3,"Measurement"],[3,"SimulationRunner"],[3,"SimulationFrame"],[3,"FilterFrame"],[3,"SimulationConfig"],[3,"AnimalState"],[3,"AnimalConfig"],[3,"SignalConfig"],[4,"GainPattern"],[4,"PropagationModel"],[3,"RssiModel"],[3,"UavState"],[3,"UavConfig"],[3,"UavController"],[4,"PatternType"]]};
initSearch(searchIndex);
